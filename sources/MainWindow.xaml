<Window x:Class="RevitDBExplorer.MainWindow"
        x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:componentQueryVisualization="clr-namespace:RevitDBExplorer.UIComponents.QueryVisualization"
        xmlns:componentTree="clr-namespace:RevitDBExplorer.UIComponents.Tree"
        xmlns:wpf="clr-namespace:RevitDBExplorer.WPF"
        xmlns:converters="clr-namespace:RevitDBExplorer.WPF.Converters"       
        xmlns:controls="clr-namespace:RevitDBExplorer.WPF.Controls" 
        xmlns:ext="clr-namespace:RevitDBExplorer.WPF.MarkupExtensions"       
        mc:Ignorable="d"
        WindowStartupLocation="CenterOwner"
        Title="Revit database explorer and editor"
        MinHeight="383" Height="{ext:SettingBinding MainWindowHeight}"
        MinWidth="643" Width="{ext:SettingBinding MainWindowWidth}" 
        Icon="/RevitDBExplorer;component/Resources/RDBE.ico" 
        Closed="Window_Closed"
        KeyDown="Window_KeyDown" 
        SizeChanged="Window_SizeChanged"      
        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
        TextOptions.TextFormattingMode="Display"
        
        >
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/Templates/All.xaml"/>
                <wpf:ThemeResourceDictionary Name="Colors"/>
                <ResourceDictionary Source="Resources/VectorGraphic.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <converters:PercentageOfValueConverter x:Key="PercentageOfValueConverter"/>
            <converters:FeetToMetersConverter x:Key="FeetToMetersConverter"/>
            <converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>
            <converters:EnumToVisibilityConverter x:Key="EnumToVisibilityConverter"/>
        </ResourceDictionary>
    </Window.Resources>

    <Window.ContextMenu>
        <ContextMenu>
            <MenuItem Header="Theme" >
                <MenuItem Header ="Light - default" Tag="Default" Click="Window_MenuItemSelectTheme_Click"/>
                <MenuItem Header ="Dark - be ready" Tag="Dark" Click="Window_MenuItemSelectTheme_Click"/>
            </MenuItem>
        </ContextMenu>
    </Window.ContextMenu>

    <Grid Margin="2" >
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="{ext:SettingBinding FirstColumnWidth}" MinWidth="100" x:Name="cFirstColumnDefinition" />
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="*" MinWidth="100"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <UniformGrid Grid.ColumnSpan="3" Columns="12" Margin="0 0 0 2">
            <UniformGrid.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Padding" Value="3 3 3 4"/>
                    <Setter Property="Margin" Value="2 0 2 0"/>
                </Style>
            </UniformGrid.Resources>

            <Button Click="SelectorButton_Click" Tag="CurrentSelection" Margin="0 0 2 0" ToolTip="Snoop already selected elements in Revit; if none selected, snoop all elements from active view">
                <Path Style="{StaticResource IconSelection}"  />
            </Button>
            <Button Click="SelectorButton_Click" Tag="Db" ToolTip="Snoop DB" >
                <Path Style="{StaticResource IconDb}"  />
            </Button>
            <Button Click="SelectorButton_Click" Tag="ActiveView" ToolTip="Snoop active view">
                <Path Style="{StaticResource IconActiveView}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="ActiveDocument" ToolTip="Snoop active document">
                <Path Style="{StaticResource IconActiveDocument}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="Application" ToolTip="Snoop application">
                <Path Style="{StaticResource IconApplication}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="PickFace" ToolTip="Snoop by selecting face in Revit">
                <Path Style="{StaticResource IconPickFace}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="PickEdge" ToolTip="Snoop by selecting edge in Revit">
                <Path Style="{StaticResource IconPickEdge}"  />
            </Button>
            <Button Click="SelectorButton_Click" Tag="LinkedElement" ToolTip="Snoop by selecting linked element in Revit">
                <Path Style="{StaticResource IconLinkedElement}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="DependentElements" ToolTip="Snoop dependent elements of already selected elements in Revit">
                <Path Style="{StaticResource IconDependentElements}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="Schemas" ToolTip="Snoop Extensible Storage framework schemas located in memory">
                <Path Style="{StaticResource IconSchemas}" />
            </Button>
            <Button Click="SelectorButton_Click"  Tag="FilterableCategories" ToolTip="Snoop categories that may be used in a ParameterFilterElement">
                <Path Style="{StaticResource IconCategories}" SnapsToDevicePixels="True" />
            </Button>
            <Button Click="ButtonWithSubMenu_Click" Margin="2 0 0 0" ToolTip="Snoop Forge types">
                <Path Style="{StaticResource IconForge}" />
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="ParameterUtils.GetAllBuiltInGroups()" Click="SelectorButton_Click" Tag="ForgeParameterUtilsGetAllBuiltInGroups"/>
                        <MenuItem Header="ParameterUtils.GetAllBuiltInParameters()" Click="SelectorButton_Click" Tag="ForgeParameterUtilsGetAllBuiltInParameters"/>
                        <MenuItem Header="UnitUtils.GetAllMeasurableSpecs()" Click="SelectorButton_Click" Tag="ForgeUnitUtilsGetAllMeasurableSpecs"/>
                        <MenuItem Header="UnitUtils.GetAllUnits()" Click="SelectorButton_Click" Tag="ForgeUnitUtilsGetAllUnits"/>
                        <MenuItem Header="UnitUtils.GetAllDisciplines()" Click="SelectorButton_Click" Tag="ForgeUnitUtilsGetAllDisciplines"/>
                        <MenuItem Header="SpecUtils.GetAllSpecs()" Click="SelectorButton_Click" Tag="ForgeSpecUtilsGetAllSpecs"/>
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>
        </UniformGrid>

        <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="0 3 0 3" >
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <controls:TextBoxWithPlaceholder Text="{Binding DatabaseQuery, Mode=TwoWay, Delay=1000, UpdateSourceTrigger=PropertyChanged}" Placeholder="Query Revit database" ToolTip="{Binding DatabaseQueryToolTip}" ToolTipService.ShowDuration="50000"/>

            <componentQueryVisualization:QueryVisualizationView  Grid.Row="1" Margin="0 1 0 0" DataContext="{Binding QueryVisualization}"/>
        </Grid>

        <controls:TextBoxWithPlaceholder Grid.Row="2" Grid.Column="0" Margin="0 0 2 3" Text="{Binding TreeItemsFilterPhrase, Mode=TwoWay, Delay=500, UpdateSourceTrigger=PropertyChanged}" Placeholder="Filter tree by item name"/>

        <Grid Grid.Row="2" Grid.Column="2" Margin="0 0 0 3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>

            <controls:TextBoxWithPlaceholder Margin="0 0 2 0" Text="{Binding ListItemsFilterPhrase, Mode=TwoWay, Delay=200, UpdateSourceTrigger=PropertyChanged}" Placeholder="Filter list by property/method name"/>

            <Button Grid.Column="1" Margin="2 0 0 0" MinWidth="22" MinHeight="22" Padding="2 1 1 1" ToolTip="Reload data from Revit in the list" Background="Transparent"  Click="ReloadButton_Click">
                <Path Style="{StaticResource IconReload}" Width="18" />
            </Button>
        </Grid>


        <TreeView Grid.Row="3" Grid.Column="0" ItemsSource="{Binding TreeItems}" Margin="0 2 2 0" BorderThickness="0"  SelectedItemChanged="TreeView_SelectedItemChanged" VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" SizeChanged="Window_SizeChanged">
            <TreeView.Resources>
                <HierarchicalDataTemplate DataType="{x:Type componentTree:SnoopableCategoryTreeVM}" ItemsSource="{Binding Items}">
                    <StackPanel Orientation="Horizontal">
                        <StackPanel.Resources>
                            <Style TargetType="{x:Type TextBlock}" x:Key="postfix">
                                <Style.Triggers>
                                    <MultiDataTrigger >
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=IsSelected}" Value="False" />                                           
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Foreground" Value="{DynamicResource TreeView.Category.Postfix}"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Resources>
                        <TextBlock Text="{Binding Name, Mode=OneWay}" />
                        <TextBlock Text="[" Margin="0 -1 0 0" Style="{StaticResource postfix}"/>
                        <TextBlock Text="{Binding Count, Mode=OneWay}"  Style="{StaticResource postfix}"/>
                        <TextBlock Text="]" Margin="0 -1 0 0" Style="{StaticResource postfix}"/>                        
                    </StackPanel>                                  
                </HierarchicalDataTemplate>

                <HierarchicalDataTemplate DataType="{x:Type componentTree:SnoopableObjectTreeVM}" ItemsSource="{Binding Items}">
                    <StackPanel Orientation="Horizontal">
                        <StackPanel.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Select in Revit" Click="TreeViewItem_MenuItemInRevit_Click" Tag="Select" IsEnabled="{Binding IsSelectInRevitAvailable}"/>
                                <MenuItem Header="Show in Revit" Click="TreeViewItem_MenuItemInRevit_Click" Tag="Show" IsEnabled="{Binding IsShowInRevitAvailable}"/>
                                <MenuItem Header="Snoop in a new window" Click="TreeViewItem_MenuItemSnoop_Click" />
                            </ContextMenu>
                        </StackPanel.ContextMenu>
                        <TextBlock>             
                             <Run Text="{Binding Prefix, Mode=OneWay}">
                                 <Run.Style>
                                     <Style TargetType="{x:Type Run}">
                                        <Style.Triggers>
                                            <MultiDataTrigger >
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=IsSelected}" Value="False" />                                                
                                                </MultiDataTrigger.Conditions>                                               
                                                <Setter Property="Foreground" Value="{DynamicResource TreeView.Object.Prefix}"/>
                                            </MultiDataTrigger>                                        
                                        </Style.Triggers>
                                     </Style>
                                 </Run.Style>
                              </Run>
                            <Run Text="{Binding Object.Name, Mode=OneWay}" />
                        </TextBlock>
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.Resources>

            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                    <EventSetter Event="PreviewMouseRightButtonDown" Handler="TreeViewItem_MouseRightButtonDown"/>
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                    <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
                    <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled, Mode=TwoWay}"/>
                    <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}" />
                    <Setter Property="Padding" Value="2 1 2 1"/>

                    <Style.Resources>
                        <Style TargetType="Border">
                            <Setter Property="CornerRadius" Value="2" />
                            <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItem.BorderBrush}" />
                            <Setter Property="BorderThickness" Value="1" />
                            
                        </Style>
                        <!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Yellow"/>-->
                    </Style.Resources>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItem.BorderBrush.IsSelected}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource TreeViewItem.InactiveSelectionHighlightTextBrushKey}"/>
                            <Setter Property="Border.Background" Value="red"/>
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>
        </TreeView>

        <GridSplitter Grid.Row="3" Grid.Column="1" Background="{DynamicResource GridSplitter.Background}"  Width="2" Margin="0 2 2 0" HorizontalAlignment="Left" VerticalAlignment="Stretch" />

        <ListView Grid.Row="3" Grid.Column="3" Margin="-2 2 0 0" BorderThickness="0" ItemsSource="{Binding ListItems}" d:ItemsSource="{d:SampleData ItemCount=5}" SelectionMode="Single" SelectedItem="{Binding ListSelectedItem}"  AlternationCount="2" >
            <ListView.Resources>
                <ContextMenu x:Key="ItemContextMenu">
                    <MenuItem Header="Copy" Click="ListViewItem_MenuItemCopy_Click" />
                </ContextMenu>

                <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}" >
                    <Setter Property="ToolTip">
                        <Setter.Value>
                            <StackPanel Orientation="Vertical"  MaxWidth="727">
                                <StackPanel.Resources>
                                    <SolidColorBrush x:Key="ToolTip.Key" Color="Gray"/>
                                    <SolidColorBrush x:Key="ToolTip.Value" Color="#000000"/>
                                    <SolidColorBrush x:Key="ToolTip.ReturnType" Color="#0000FF"/>
                                    <SolidColorBrush x:Key="ToolTip.Name" Color="#745320"/>
                                    <SolidColorBrush x:Key="ToolTip.Invocation" Color="#21377F"/>
                                </StackPanel.Resources>
                                <TextBlock Visibility="{Binding Documentation.Name, Converter={StaticResource StringToVisibilityConverter}}">
                                    <Run Foreground="{DynamicResource ToolTip.ReturnType}" Text="{Binding Documentation.ReturnType, Mode=OneWay}" /> <Run Foreground="{DynamicResource ToolTip.Name}" Text="{Binding Documentation.Name, Mode=OneWay}" /><Run Foreground="{DynamicResource ToolTip.Invocation}" Text="{Binding Documentation.Invocation, Mode=OneWay}" />
                                    <LineBreak/>
                                </TextBlock>
                                <TextBlock TextWrapping="Wrap" Visibility="{Binding Documentation.Summary, Converter={StaticResource StringToVisibilityConverter}}" >  
                                    <Run Text="{Binding Documentation.Summary, Mode=OneWay}" Foreground="{DynamicResource ToolTip.Value}" /><LineBreak/>
                                </TextBlock>
                                <TextBlock TextWrapping="Wrap" Visibility="{Binding Documentation.Returns, Converter={StaticResource StringToVisibilityConverter}}" >
                                    <Run Text="Returns:" Foreground="{DynamicResource ToolTip.Key}"/><LineBreak/>
                                    <Run Text="{Binding Documentation.Returns, Mode=OneWay}" Foreground="{DynamicResource ToolTip.Value}" /><LineBreak/>
                                </TextBlock>
                                <TextBlock TextWrapping="Wrap" Visibility="{Binding Documentation.Remarks, Converter={StaticResource StringToVisibilityConverter}}">
                                    <Run Text="Remarks:" Foreground="{DynamicResource ToolTip.Key}"/><LineBreak/>
                                    <Run Text="{Binding Documentation.Remarks, Mode=OneWay}"  Foreground="{DynamicResource ToolTip.Value}"/><LineBreak/>
                                </TextBlock>
                                <TextBlock TextWrapping="Wrap" Visibility="{Binding ValueTypeName, Converter={StaticResource StringToVisibilityConverter}}">
                                    <Run Text="Accessor:" Foreground="{DynamicResource ToolTip.Key}"/><LineBreak/>
                                    <Run Text="{Binding ValueTypeName, Mode=OneWay}" Foreground="{DynamicResource ToolTip.Value}" />
                                </TextBlock>

                            </StackPanel>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTipService.ShowDuration" Value="50000"></Setter>
                    <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}" />
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="true" >
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true" >
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />                           
                        </Trigger>

                        <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                            <Setter Property="Background" Value="{DynamicResource ListView.Alternation.Background_0}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                            <Setter Property="Background" Value="{DynamicResource ListView.Alternation.Background_1}"/>
                        </Trigger>
                    </Style.Triggers>                    
                </Style>
            </ListView.Resources>

            <ListView.View>
                <GridView AllowsColumnReorder="False">
                    <GridViewColumn Header="Name" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=ActualWidth, Converter={StaticResource PercentageOfValueConverter}, ConverterParameter=38}">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Path Style="{StaticResource IconProperty}" Margin="0 1 4 0" Visibility="{Binding MemberKind, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter= Property}" ToolTip="Property"/>
                                    <Path Style="{StaticResource IconMethod}" Margin="0 1 4 0" Visibility="{Binding MemberKind, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter= Method}" ToolTip="Method"/>
                                    <Path Style="{StaticResource IconMethodStatic}" Margin="0 1 4 0" Visibility="{Binding MemberKind, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter= StaticMethod}" ToolTip="Static Method"/>
                                    <Path Style="{StaticResource IconExtra}" Margin="0 1 4 0" Visibility="{Binding MemberKind, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter= Extra}" ToolTip="Extra - not available directly in API"/>
                                    <TextBlock Text="{Binding Name, Mode=OneWay}" Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"  />
                                </StackPanel>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>

                    <GridViewColumn Header="Value" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=ActualWidth, Converter={StaticResource PercentageOfValueConverter}, ConverterParameter=62}"  >
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock x:Name="cTextBlock" Text="{Binding Value, Mode=OneWay}" TextWrapping="NoWrap" MouseLeftButtonUp="ListViewItem_MouseLeftButtonUp"   >
                                    <TextBlock.ToolTip>
                                        <TextBlock Text="{Binding ., Converter={StaticResource FeetToMetersConverter}}" />
                                    </TextBlock.ToolTip>
                                </TextBlock>

                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding CanBeSnooped}" Value="False">
                                        <Setter TargetName="cTextBlock" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding CanBeSnooped}" Value="True">
                                        <Setter TargetName="cTextBlock" Property="Foreground" Value="{DynamicResource Member.Link}"/>
                                        <Setter TargetName="cTextBlock" Property="Cursor" Value="Hand"/>
                                        <Setter TargetName="cTextBlock" Property="FontWeight" Value="Bold"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding HasException}" Value="True">
                                        <Setter TargetName="cTextBlock" Property="Foreground" Value="{DynamicResource Member.Error}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>

                </GridView>
            </ListView.View>

            <ListView.GroupStyle>
                <GroupStyle>
                    <GroupStyle.HeaderTemplate>
                        <DataTemplate>
                            <TextBlock FontWeight="Bold" FontSize="14" Margin="5 0 0 0" Text="{Binding Name, Mode=OneWay}" Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </DataTemplate>
                    </GroupStyle.HeaderTemplate>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Margin" Value="2" />
                        </Style>
                    </GroupStyle.ContainerStyle>
                </GroupStyle>
            </ListView.GroupStyle>
        </ListView>

    </Grid>
</Window>